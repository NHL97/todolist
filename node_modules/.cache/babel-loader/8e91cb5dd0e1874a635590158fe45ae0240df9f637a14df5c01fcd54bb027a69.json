{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\striv\\\\Desktop\\\\todolist\\\\src\\\\Header.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Header.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Header() {\n  _s();\n  const [currentTime, setCurrentTime] = useState('');\n  const [currentDate, setCurrentDate] = useState('');\n  const [currentWeather, setCurrentWeather] = useState('');\n  useEffect(() => {\n    // Fetch current time and date\n    function getCurrentTimeAndDate() {\n      const currentDate = new Date();\n      setCurrentTime(currentDate.toLocaleTimeString());\n      setCurrentDate(currentDate.toLocaleDateString());\n    }\n\n    // Fetch current weather\n    function getCurrentWeather() {\n      const apiKey = \"3e5375e4e6b0bcf722cee713718c51b9\";\n      const city = \"Moscow\";\n      const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n      fetch(apiUrl).then(response => response.json()).then(data => {\n        const weatherDescription = data.weather[0].description;\n        const temperature = Math.round(data.main.temp - 273.15); // Convert Kelvin to Celsius\n        setCurrentWeather(`${weatherDescription}, ${temperature}°C`);\n      }).catch(error => {\n        console.error(\"Error fetching weather data:\", error);\n      });\n    }\n\n    // Update time and date every second\n    const intervalId = setInterval(getCurrentTimeAndDate, 1000);\n\n    // Fetch current weather once\n    getCurrentWeather();\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(intervalId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"top-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-date\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"current-time\",\n        children: currentTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"current-date\",\n        children: currentDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-dark text-center py-4\",\n      children: \"Task Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"current-weather\",\n        children: currentWeather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(Header, \"NLoA3voyVzxc5w+dvYgDrAmscBY=\");\n_c = Header;\nexport default Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Header","_s","currentTime","setCurrentTime","currentDate","setCurrentDate","currentWeather","setCurrentWeather","getCurrentTimeAndDate","Date","toLocaleTimeString","toLocaleDateString","getCurrentWeather","apiKey","city","apiUrl","fetch","then","response","json","data","weatherDescription","weather","description","temperature","Math","round","main","temp","catch","error","console","intervalId","setInterval","clearInterval","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/striv/Desktop/todolist/src/Header.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n  const [currentTime, setCurrentTime] = useState('');\r\n  const [currentDate, setCurrentDate] = useState('');\r\n  const [currentWeather, setCurrentWeather] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Fetch current time and date\r\n    function getCurrentTimeAndDate() {\r\n      const currentDate = new Date();\r\n      setCurrentTime(currentDate.toLocaleTimeString());\r\n      setCurrentDate(currentDate.toLocaleDateString());\r\n    }\r\n\r\n    // Fetch current weather\r\n    function getCurrentWeather() {\r\n      const apiKey = \"3e5375e4e6b0bcf722cee713718c51b9\";\r\n      const city = \"Moscow\";\r\n      const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\r\n\r\n      fetch(apiUrl)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          const weatherDescription = data.weather[0].description;\r\n          const temperature = Math.round(data.main.temp - 273.15); // Convert Kelvin to Celsius\r\n          setCurrentWeather(`${weatherDescription}, ${temperature}°C`);\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Error fetching weather data:\", error);\r\n        });\r\n    }\r\n\r\n    // Update time and date every second\r\n    const intervalId = setInterval(getCurrentTimeAndDate, 1000);\r\n\r\n    // Fetch current weather once\r\n    getCurrentWeather();\r\n\r\n    // Cleanup interval on component unmount\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"top-panel\">\r\n        \r\n      <div className=\"time-date\">\r\n        <span id=\"current-time\">{currentTime}</span>\r\n        <hr></hr>\r\n        <span id=\"current-date\">{currentDate}</span>\r\n      </div>\r\n      <h1 className='text-dark text-center py-4'>Task Manager</h1>\r\n      <div className=\"weather\">\r\n        <span id=\"current-weather\">{currentWeather}</span>\r\n      </div>\r\n\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Header;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAExDC,SAAS,CAAC,MAAM;IACd;IACA,SAASW,qBAAqBA,CAAA,EAAG;MAC/B,MAAMJ,WAAW,GAAG,IAAIK,IAAI,CAAC,CAAC;MAC9BN,cAAc,CAACC,WAAW,CAACM,kBAAkB,CAAC,CAAC,CAAC;MAChDL,cAAc,CAACD,WAAW,CAACO,kBAAkB,CAAC,CAAC,CAAC;IAClD;;IAEA;IACA,SAASC,iBAAiBA,CAAA,EAAG;MAC3B,MAAMC,MAAM,GAAG,kCAAkC;MACjD,MAAMC,IAAI,GAAG,QAAQ;MACrB,MAAMC,MAAM,GAAG,qDAAqDD,IAAI,UAAUD,MAAM,EAAE;MAE1FG,KAAK,CAACD,MAAM,CAAC,CACVE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;QACZ,MAAMC,kBAAkB,GAAGD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW;QACtD,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACN,IAAI,CAACO,IAAI,CAACC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC;QACzDrB,iBAAiB,CAAC,GAAGc,kBAAkB,KAAKG,WAAW,IAAI,CAAC;MAC9D,CAAC,CAAC,CACDK,KAAK,CAACC,KAAK,IAAI;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD,CAAC,CAAC;IACN;;IAEA;IACA,MAAME,UAAU,GAAGC,WAAW,CAACzB,qBAAqB,EAAE,IAAI,CAAC;;IAE3D;IACAI,iBAAiB,CAAC,CAAC;;IAEnB;IACA,OAAO,MAAMsB,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjC,OAAA;IAAKoC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBAExBrC,OAAA;MAAKoC,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBrC,OAAA;QAAMsC,EAAE,EAAC,cAAc;QAAAD,QAAA,EAAElC;MAAW;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC5C1C,OAAA;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT1C,OAAA;QAAMsC,EAAE,EAAC,cAAc;QAAAD,QAAA,EAAEhC;MAAW;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC,eACN1C,OAAA;MAAIoC,SAAS,EAAC,4BAA4B;MAAAC,QAAA,EAAC;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5D1C,OAAA;MAAKoC,SAAS,EAAC,SAAS;MAAAC,QAAA,eACtBrC,OAAA;QAAMsC,EAAE,EAAC,iBAAiB;QAAAD,QAAA,EAAE9B;MAAc;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEH,CAAC;AAGV;AAACxC,EAAA,CAzDQD,MAAM;AAAA0C,EAAA,GAAN1C,MAAM;AA2Df,eAAeA,MAAM;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}